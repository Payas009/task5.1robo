#!/usr/bin/env python3

import rospy
from duckietown_msgs.msg import Twist2DStamped, FSMState, WheelEncoderStamped
from sensor_msgs.msg import Range

class DriveSquare:
    def __init__(self):
        rospy.init_node('drive_square_node', anonymous=True)

        # Publishers and subscribers
        self.pub = rospy.Publisher('/duckiebot/car_cmd_switch_node/cmd', Twist2DStamped, queue_size=1)
        rospy.Subscriber('/duckiebot/fsm_node/mode', FSMState, self.fsm_callback)
        rospy.Subscriber('/duckiebot/left_wheel_encoder_node/tick', WheelEncoderStamped, self.encoder_callback)
        rospy.Subscriber('/duckiebot/front_center_tof_driver_node/range', Range, self.range_callback)

        # Variables for robot state
        self.cmd_msg = Twist2DStamped()
        self.tick_count = 0
        self.front_dis = 0

    def fsm_callback(self, msg):
        rospy.loginfo("Current State: %s", msg.state)
        if msg.state == "NORMAL_JOYSTICK_CONTROL":
            self.stop_robot()
        elif msg.state == "LANE_FOLLOWING":
            rospy.sleep(1)  # Delay to ensure node is ready
            self.move_robot()

    def encoder_callback(self, msg):
        self.tick_count = msg.data

    def range_callback(self, msg):
        self.front_dis = msg.range

    def move_robot(self):
        """Execute robot movement in a square pattern."""
        for _ in range(4):
            self.move_straight()
            self.rotate_in_place()
        self.stop_robot()

    def move_straight(self):
        """Drive the robot forward."""
        self.cmd_msg.header.stamp = rospy.Time.now()
        self.cmd_msg.v = 0.5
        self.cmd_msg.omega = 0.0
        self.pub.publish(self.cmd_msg)
        rospy.loginfo("Moving forward!")
        rospy.sleep(1)  # Drive time for moving straight

    def rotate_in_place(self):
        """Rotate the robot in place."""
        self.cmd_msg.header.stamp = rospy.Time.now()
        self.cmd_msg.v = 0.0
        self.cmd_msg.omega = 1.0
        self.pub.publish(self.cmd_msg)
        rospy.loginfo("Rotating!")
        rospy.sleep(0.7)  # Rotation time
        self.stop_robot()

    def stop_robot(self):
        """Send zero velocities to stop the robot."""
        self.cmd_msg.header.stamp = rospy.Time.now()
        self.cmd_msg.v = 0.0
        self.cmd_msg.omega = 0.0
        self.pub.publish(self.cmd_msg)

    def run(self):
        rospy.spin()

if __name__ == '__main__':
    try:
        robot_controller = DriveSquare()
        robot_controller.run()
    except rospy.ROSInterruptException:
        pass

